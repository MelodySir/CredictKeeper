package com.melody.creditkeeper.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.melody.creditkeeper.beans.BillBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_BEAN".
*/
public class BillBeanDao extends AbstractDao<BillBean, Long> {

    public static final String TABLENAME = "BILL_BEAN";

    /**
     * Properties of entity BillBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Usage = new Property(1, String.class, "usage", false, "USAGE");
        public final static Property Amount = new Property(2, double.class, "amount", false, "AMOUNT");
        public final static Property BillDate = new Property(3, java.util.Date.class, "billDate", false, "BILL_DATE");
        public final static Property IsStage = new Property(4, boolean.class, "isStage", false, "IS_STAGE");
        public final static Property Volume = new Property(5, int.class, "volume", false, "VOLUME");
        public final static Property StageRate = new Property(6, double.class, "stageRate", false, "STAGE_RATE");
        public final static Property OverdueRate = new Property(7, double.class, "overdueRate", false, "OVERDUE_RATE");
        public final static Property CurrentVolume = new Property(8, int.class, "currentVolume", false, "CURRENT_VOLUME");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
    }


    public BillBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BillBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USAGE\" TEXT," + // 1: usage
                "\"AMOUNT\" REAL NOT NULL ," + // 2: amount
                "\"BILL_DATE\" INTEGER," + // 3: billDate
                "\"IS_STAGE\" INTEGER NOT NULL ," + // 4: isStage
                "\"VOLUME\" INTEGER NOT NULL ," + // 5: volume
                "\"STAGE_RATE\" REAL NOT NULL ," + // 6: stageRate
                "\"OVERDUE_RATE\" REAL NOT NULL ," + // 7: overdueRate
                "\"CURRENT_VOLUME\" INTEGER NOT NULL ," + // 8: currentVolume
                "\"REMARK\" TEXT);"); // 9: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String usage = entity.getUsage();
        if (usage != null) {
            stmt.bindString(2, usage);
        }
        stmt.bindDouble(3, entity.getAmount());
 
        java.util.Date billDate = entity.getBillDate();
        if (billDate != null) {
            stmt.bindLong(4, billDate.getTime());
        }
        stmt.bindLong(5, entity.getIsStage() ? 1L: 0L);
        stmt.bindLong(6, entity.getVolume());
        stmt.bindDouble(7, entity.getStageRate());
        stmt.bindDouble(8, entity.getOverdueRate());
        stmt.bindLong(9, entity.getCurrentVolume());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String usage = entity.getUsage();
        if (usage != null) {
            stmt.bindString(2, usage);
        }
        stmt.bindDouble(3, entity.getAmount());
 
        java.util.Date billDate = entity.getBillDate();
        if (billDate != null) {
            stmt.bindLong(4, billDate.getTime());
        }
        stmt.bindLong(5, entity.getIsStage() ? 1L: 0L);
        stmt.bindLong(6, entity.getVolume());
        stmt.bindDouble(7, entity.getStageRate());
        stmt.bindDouble(8, entity.getOverdueRate());
        stmt.bindLong(9, entity.getCurrentVolume());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BillBean readEntity(Cursor cursor, int offset) {
        BillBean entity = new BillBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // usage
            cursor.getDouble(offset + 2), // amount
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // billDate
            cursor.getShort(offset + 4) != 0, // isStage
            cursor.getInt(offset + 5), // volume
            cursor.getDouble(offset + 6), // stageRate
            cursor.getDouble(offset + 7), // overdueRate
            cursor.getInt(offset + 8), // currentVolume
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAmount(cursor.getDouble(offset + 2));
        entity.setBillDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setIsStage(cursor.getShort(offset + 4) != 0);
        entity.setVolume(cursor.getInt(offset + 5));
        entity.setStageRate(cursor.getDouble(offset + 6));
        entity.setOverdueRate(cursor.getDouble(offset + 7));
        entity.setCurrentVolume(cursor.getInt(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BillBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BillBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BillBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
