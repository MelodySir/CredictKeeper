// This file was generated by PermissionsDispatcher. Do not modify!
package com.melody.base;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class BasePermissionActivityPermissionsDispatcher {
  private static final int REQUEST_SHOWSTORAGE = 0;

  private static final String[] PERMISSION_SHOWSTORAGE = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_SHOWTAKEAUDIO = 1;

  private static final String[] PERMISSION_SHOWTAKEAUDIO = new String[] {"android.permission.RECORD_AUDIO","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_SHOWTAKEPHOTO = 2;

  private static final String[] PERMISSION_SHOWTAKEPHOTO = new String[] {"android.permission.CAMERA","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private static final int REQUEST_SHOWTAKEVIDEO = 3;

  private static final String[] PERMISSION_SHOWTAKEVIDEO = new String[] {"android.permission.CAMERA","android.permission.RECORD_AUDIO","android.permission.WRITE_EXTERNAL_STORAGE","android.permission.READ_EXTERNAL_STORAGE"};

  private BasePermissionActivityPermissionsDispatcher() {
  }

  static void showTakePhotoWithPermissionCheck(BasePermissionActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWTAKEPHOTO)) {
      target.showTakePhoto();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEPHOTO)) {
        target.showRationaleForTakePhoto(new BasePermissionActivityShowTakePhotoPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEPHOTO, REQUEST_SHOWTAKEPHOTO);
      }
    }
  }

  static void showTakeAudioWithPermissionCheck(BasePermissionActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWTAKEAUDIO)) {
      target.showTakeAudio();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEAUDIO)) {
        target.showRationaleForTakeAudio(new BasePermissionActivityShowTakeAudioPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEAUDIO, REQUEST_SHOWTAKEAUDIO);
      }
    }
  }

  static void showTakeVideoWithPermissionCheck(BasePermissionActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWTAKEVIDEO)) {
      target.showTakeVideo();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEVIDEO)) {
        target.showRationaleForTakeVideo(new BasePermissionActivityShowTakeVideoPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEVIDEO, REQUEST_SHOWTAKEVIDEO);
      }
    }
  }

  static void showStorageWithPermissionCheck(BasePermissionActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_SHOWSTORAGE)) {
      target.showStorage();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWSTORAGE)) {
        target.showRationaleForStorage(new BasePermissionActivityShowStoragePermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_SHOWSTORAGE, REQUEST_SHOWSTORAGE);
      }
    }
  }

  static void onRequestPermissionsResult(BasePermissionActivity target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_SHOWTAKEPHOTO:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.showTakePhoto();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEPHOTO)) {
          target.onTakePhotoNeverAskAgain();
        } else {
          target.onTakePhotoDenied();
        }
      }
      break;
      case REQUEST_SHOWTAKEAUDIO:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.showTakeAudio();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEAUDIO)) {
          target.onTakeAudioNeverAskAgain();
        } else {
          target.onTakeAudioDenied();
        }
      }
      break;
      case REQUEST_SHOWTAKEVIDEO:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.showTakeVideo();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWTAKEVIDEO)) {
          target.onTakeVideoNeverAskAgain();
        } else {
          target.onTakeVideoDenied();
        }
      }
      break;
      case REQUEST_SHOWSTORAGE:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.showStorage();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_SHOWSTORAGE)) {
          target.onStorageNeverAskAgain();
        } else {
          target.onStorageDenied();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class BasePermissionActivityShowTakePhotoPermissionRequest implements PermissionRequest {
    private final WeakReference<BasePermissionActivity> weakTarget;

    private BasePermissionActivityShowTakePhotoPermissionRequest(BasePermissionActivity target) {
      this.weakTarget = new WeakReference<BasePermissionActivity>(target);
    }

    @Override
    public void proceed() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEPHOTO, REQUEST_SHOWTAKEPHOTO);
    }

    @Override
    public void cancel() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      target.onTakePhotoDenied();
    }
  }

  private static final class BasePermissionActivityShowTakeAudioPermissionRequest implements PermissionRequest {
    private final WeakReference<BasePermissionActivity> weakTarget;

    private BasePermissionActivityShowTakeAudioPermissionRequest(BasePermissionActivity target) {
      this.weakTarget = new WeakReference<BasePermissionActivity>(target);
    }

    @Override
    public void proceed() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEAUDIO, REQUEST_SHOWTAKEAUDIO);
    }

    @Override
    public void cancel() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      target.onTakeAudioDenied();
    }
  }

  private static final class BasePermissionActivityShowTakeVideoPermissionRequest implements PermissionRequest {
    private final WeakReference<BasePermissionActivity> weakTarget;

    private BasePermissionActivityShowTakeVideoPermissionRequest(BasePermissionActivity target) {
      this.weakTarget = new WeakReference<BasePermissionActivity>(target);
    }

    @Override
    public void proceed() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_SHOWTAKEVIDEO, REQUEST_SHOWTAKEVIDEO);
    }

    @Override
    public void cancel() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      target.onTakeVideoDenied();
    }
  }

  private static final class BasePermissionActivityShowStoragePermissionRequest implements PermissionRequest {
    private final WeakReference<BasePermissionActivity> weakTarget;

    private BasePermissionActivityShowStoragePermissionRequest(BasePermissionActivity target) {
      this.weakTarget = new WeakReference<BasePermissionActivity>(target);
    }

    @Override
    public void proceed() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_SHOWSTORAGE, REQUEST_SHOWSTORAGE);
    }

    @Override
    public void cancel() {
      BasePermissionActivity target = weakTarget.get();
      if (target == null) return;
      target.onStorageDenied();
    }
  }
}
